// –ø–µ—Ä–µ–±–∏—Ä–∞–µ–º—ã–µ –æ—å–µ–∫—Ç—ã
// let range = {
//     from: 1,
//     to: 5
//   };
// —á–µ—Ä–µ–∑ this
/* 1. –≤—ã–∑–æ–≤ for..of —Å–Ω–∞—á–∞–ª–∞ –≤—ã–∑—ã–≤–∞–µ—Ç —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é
range[Symbol.iterator] = function() {
    // ...–æ–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç –∏—Ç–µ—Ä–∞—Ç–æ—Ä–∞:
    // 2. –î–∞–ª–µ–µ, for..of —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å —ç—Ç–∏–º –∏—Ç–µ—Ä–∞—Ç–æ—Ä–æ–º,
    // –∑–∞–ø—Ä–∞—à–∏–≤–∞—è —É –Ω–µ–≥–æ –Ω–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    return {
      current: this.from,
      last: this.to,
      // 3. next() –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –∫–∞–∂–¥–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ —Ü–∏–∫–ª–∞ for..of
      next() {
        // 4. –æ–Ω –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –≤–∏–¥–µ –æ–±—ä–µ–∫—Ç–∞ {done:.., value :...}
        if (this.current <= this.last) {
          return { done: false, value: this.current++ };
        } else {
          return { done: true };
        }
      }
    };
  };
 
  
  // —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç!
  for (let num of range) {
    alert(num); // 1, –∑–∞—Ç–µ–º 2, 3, 4, 5
  }
  */

/*
// –°—Ç—Ä–æ–∫–∞ –ø–µ—Ä–µ–±–æ—Ä
for (let char of "test") {
  // —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç 4 —Ä–∞–∑–∞: –ø–æ –æ–¥–Ω–æ–º—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
  alert( char ); // t, –∑–∞—Ç–µ–º e, –∑–∞—Ç–µ–º s, –∑–∞—Ç–µ–º t
}

// –¥–∞–∂–µ —Ç–∞–∫ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å
let str = 'ùí≥üòÇ';
for (let char of str) {
    alert( char ); // ùí≥, –∞ –∑–∞—Ç–µ–º üòÇ
}
*/

/*
let range = {
    from: 1,
    to: 5
  };
let arr = Array.from(range);
alert(arr); // 1,2,3,4,5
// range –≤–∑—è—Ç –∏–∑ –ø—Ä–∏–º–µ—Ä–∞ –≤ –Ω–∞—á–∞–ª–µ —Å—Ç–∞—Ç—å–∏
// –≤–æ–∑–≤–æ–¥–∏–º –∫–∞–∂–¥–æ–µ —á–∏—Å–ª–æ –≤ –∫–≤–∞–¥—Ä–∞—Ç
let arr = Array.from(range, num => num * num);
alert(arr); // 1,4,9,16,25
*/

// –ó–¥–µ—Å—å –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º Array.from, —á—Ç–æ–±—ã –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å —Å—Ç—Ä–æ–∫—É –≤ –º–∞—Å—Å–∏–≤ –µ—ë —ç–ª–µ–º–µ–Ω—Ç–æ–≤:
// let str = 'ùí≥üòÇ';
// —Ä–∞–∑–±–∏–≤–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –Ω–∞ –º–∞—Å—Å–∏–≤ –µ—ë —ç–ª–µ–º–µ–Ω—Ç–æ–≤
// let chars = Array.from(str);
// alert(chars[0]); // ùí≥
// alert(chars[1]); // üòÇ
// alert(chars.length); // 2
// –í –æ—Ç–ª–∏—á–∏–µ –æ—Ç str.split, —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –≤ —Ä–∞–±–æ—Ç–µ –æ–ø–∏—Ä–∞–µ—Ç—Å—è –Ω–∞ –∏—Ç–µ—Ä–∏—Ä—É–µ–º–æ—Å—Ç—å —Å—Ç—Ä–æ–∫–∏, –∏ –ø–æ—ç—Ç–æ–º—É, –∫–∞–∫ –∏ for..of, –æ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Å—É—Ä—Ä–æ–≥–∞—Ç–Ω—ã–º–∏ –ø–∞—Ä–∞–º–∏.

// –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏ —ç—Ç–æ —Ç–æ –∂–µ —Å–∞–º–æ–µ, —á—Ç–æ –∏:
// let str = 'ùí≥üòÇ';
// let chars = []; // Array.from –≤–Ω—É—Ç—Ä–∏ —Å–µ–±—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ç–æ—Ç –∂–µ —Ü–∏–∫–ª
// for (let char of str) {
//   chars.push(char);
// }
// alert(chars);
// ‚Ä¶–ù–æ –≥–æ—Ä–∞–∑–¥–æ –∫–æ—Ä–æ—á–µ. –ö–æ–Ω–µ—Ü –ø–µ—Ä–µ–±–∏—Ä–∞–Ω–∏—è —Å—Ç—Ä–æ–∫, –æ–±—å–µ–∫—Ç–æ–≤, –º–∞—Å—Å–∏–≤–æ–≤.

// objects, keys, values
// –ü–æ–¥—Å—á—ë—Ç —Å—É–º–º—ã –∑–Ω–∞—á–µ–Ω–∏–π –∫–ª—é—á–∞ –æ–±—å–µ–∫—Ç–∞ (reduce)
// let salaries = {
//     "John": 5,
//     "Pete": 10,
//     "Mary": 22.4780
//   };
//   function sumSalaries(salaries) {
//   return Object.values(salaries).reduce((a, b) => a + b, 0)
//   }
//   alert( sumSalaries(salaries) );

// –¢–∞–∫–∂–µ —á–µ—Ä–µ–∑ for...of
// function sumSalaries(salaries) {
//     let sum = 0;
//     for (let salary of Object.values(salaries)) {
//       sum += salary;
//     }
//     return sum;
//   }
//   alert( sumSalaries(salaries) );

